DSA Notes



whenever the prgm is loaded it will be put into the main memory. the arrangment of data imnsiade the main memory for efficeint process is called the data structures. how the data is stored in the relational model or any other model is callled the database.

Data -- legacy data -- old data called the data warehouses helping for further process -- for fetching those data we use the data mining algos(inactive)

     -- operational data -- currently working data
     -- big data -- the data  that used in internet for various analytical process and commercial uses.
	

Memory is divided into smaller areas called bytes, the entire mem like 8gb is not compltely used whereas it is divieded into segments.

the mem is div into 3 sec used by a prgm 
where the prgm resides -- code sec --  prgm where it is loaded is by the main memory 
		       -- stack
		       -- heap

void main(){
   int a; -- 2 bytees mem
   float b; -- 4 bytes mem = 6 bytes 
}
	$ this 6 bytes is allocated in the stack memory 
	$ the portion of memory given for the above fn in the stack is called the activation record of that fn / stack frame of that function.


	$ the compiler decides how much amount of memnory should be allocated for the fn(compile time), once the prgm starts running the amount of memory is decided inside the stack.this is called static mem alloc coz the amount of mem is req is been decided during the compile time. 
	$ When there is an main fn with multiple subfn's where, initially the main fn gets the mem alloc at stack and once the other fn gets called eventhough the main fn has not yet finished its work, the mem gets alloc for the subFn(activation record)...once the subFn completes the work the mem is deallocated from stack...the same is covered for remaining.
	$ the stack mem is allocated and dealocated automatically.

# Heap mem is unorganized and they are actually an resource, on demand supply.prgm cannot access heap mem directly.Using pointers they get access.

$ pointer mem is actually decided based on the datatype size and compiler size.

void main (){
	int *p -- p gets allcated insside the stack mem 
	p=new int[4]; -- when used with new keyword the mem gets alloc inside heap
	#incase of C we use malloc by  -- p=(int*) malloc(sizeof(int)*5);
}
$ Heap mem loc is shard to the variable that is in stack.
$ if we no need heap mem then we should del them not just pointing to null ,instead we should 
	dealloc [] p; (free(p));
$ if we are not releasing it then, it will be still belonging to the program again and we cannot use them and there is an mem leakage / loss of mem.


@ elem is Missing  unsorted/ no sequence
scan through the array and find the diff b/w the array number and the index
diff=arr[0] // lowest element in the array || starting elem
for i in range(0,n):
	if(A[i]-i != diff):
		print(i+diff)
		break

@elem multipe missing && sorted with sequence
diff=low
for i in range(0,n):
	if(A[i]-i != diff) :
		while diff<A[i]-i :
			print(i+diff)
			diff++

@Efficient approach
1) take size of new array wit h size of max elem -- initialized to 0
2) increment the locations that are present in the array
3) the locations that are not incremented then they are missing elements
4)O(n) -- time complexity and the time taken for filling the elems is constant time 
5) they have limited space 

l=min(arr)
m=max(arr)
L=[0]*m
for i in range(0,m):
	L[arr[i]]+=1

for i in range(l,m) :
	if(L[i] == 0) :
		print(L[i])

@JAVA

$ intrepreter is always req whereas compiler is req only once as it translates the code block once but for intr for each line the translation part is req.for compiler the entire code is converted into a seperate file nd exe n no.of times, but here intrp for each nd every line the intrp and prgm runs along with them.

$ initially the java code / source is compilednd converted into the class file which contains byte code after that jcm comes into picture.

$ JVM contains intrp/ JIT(just in time) Compiler converts the byte code into machine code and get it exe in the hardware, jvm interacts  with h/w via OS.JIT does it faster than the intrp. 

$ java prgm once compiled they can be run anywhere in any kind of OS and this is done by JVM.

# pushing the class file into main mem for exe is called the class loading done by class loader.

# garbage collector collects the objects that are remoined in the heap which resides in the jvm. 

# loading -- boostrap loading , extension cls loading , appl class loading

@ ways of creating string in java
1)  char ch[]={'a','b','a','a'};
String str=new String(ch);

$ this str stores the ref/address of the formed string , incase of java everything is objects there is collections of characters in string they are objects.

2) byte ch[]={98,99,101,102};
String str=new String(ch);

$ this str converts this numbers into resp ascii values where it stores characters of them and finally shows them as string, once we use the "new " keyword they are created in heap and the constructor is called that is on right side, which gives the req method for storing.

3)String str=new String("JAVA")';
$ this str pointing to the string java have ref for it, storing it in heap, and the literal "JAVA" itself creates an object in the , " string constant pool ", this will not have any reference.
		
4) String str="JAVA" 
$ here we have not used the new keyword whereas they are created in the string constant pool object and they are ref to str , it ref since we have asked the jvm to create the ref for literal.

@Literals also occupy space.

String str1="JAVA";
String str2="JAVA";

$ this str1 points to the literal java created in the string pool of objects and str2 doesen't create any  object instead they point to the same literal. 
  
@reverse a stack recursively, without using any loop or other data structures
import java.util.*;
public class Main
{
    static Stack<Integer> st=new Stack<>();
    // static Stack<Integer> st=ne 
    static void insert_bottom(int x){
        if(st.isEmpty()){
            st.push(x);
            System.out.println(st);
        }else{
            int l=st.peek();
            st.pop();
            insert_bottom(x);
            System.out.println(x);
            st.push(l);
        }
    }
    static void rev(){
        if(st.size()>0){
            int k=st.peek();
            st.pop();
            rev();
            
            System.out.println("last elem "+k);
            insert_bottom(k);
        }
    }
	public static void main(String[] args){
	    st.push(1);
	    st.push(2);
	    st.push(3);
	    st.push(4);
	    System.out.println(st);
	    rev();
	}
}


@print all permutations of array

public class Main
{
    static void rec(List<List<Integer>> ls,List<Integer> ds,boolean[] freq,int n,int[]nums){
        if(ds.size() == n){
            ls.add(new ArrayList<>(ds));
            return;
        }
            for(int i=0;i<n;i++){
                if(!freq[i]){
                    freq[i]=true;
                    // System.out.println(freq[i]);
                    ds.add(nums[i]);
                    rec(ls,ds,freq,n,nums);
                    System.out.println(ds);
                    ds.remove(ds.size()-1);
                    System.out.println(ds);
                    freq[i]=false;
                }
            }
    }
	public static void main(String[] args){
	   int[]nums={1,2,4};
	   int n=nums.length;
	   List<List<Integer>> ls=new ArrayList<>();
	   List<Integer> ds=new ArrayList<>();
	   boolean[] freq=new boolean[nums.length];
	   rec(ls,ds,freq,n,nums);
	   System.out.println(ls);
	}
}


@Next permutation
$ In case of finding the next one, the general brute force approach is that generate all possible permutations in sorted order --> do a linear search on a given array --> find the next index to the array given in the question.
$ so we do initially the prefix match with the array where we do it in sorted order by matching the numbers and forming an integer that is greater than the given number.

arr=[2,1,5,4,3,0,0]
next_perm =[21543   00] $ matching first 5 chars --> by matching them there is no change since  0 0 can is already arranged need not be done
next_perm=[2154  300] $ finding number greater than 300 -->003 -->small, 030,300--same
next_perm=[215 4300] $ find greater than 4300 -- > 3400, 3430, 3040, .... not possible
next_perm=[21 54300] $ same done not possible we need someone >5
next_perm=[2 154300] $ 543100, 514300, ... we need to find immediate greater number, the immediate greater number than 1 was 3 ...
# the conclusion that can be made is that we need to find the breakpoint where " a[i]<a[i+1] " (2) find someone >1 but smaller one that is closer
(3) [23 54100] -- in this case we can find that its >2154300 where we found the 23 that is sligthly >21 and we place the remaining numbers in sorted order

#code

import java.util.*;
public class Main
{
	public static void main(String[] args) {
// 		System.out.println("Hello World");
        List<Integer> arr=Arrays.asList(1,2,4,5);
        int n=arr.size();
        int ind=-1;
        for(int i=n-2;i>=0;i--){
            if(arr.get(i)<arr.get(i+1)){
                ind=i;
                break;
            }
        }
        if(ind == -1) {System.out.println("cant be found");return;}
        
        for(int i=n-1;i>ind;i--){
            if(arr.get(i)>arr.get(ind)){
                int tem=arr.get(i);
               arr.set(i,arr.get(ind));
               arr.set(ind,tem);break;
            }
        }
        List<Integer> ls=arr.subList(ind+1,n);
        Collections.reverse(ls);
         
        System.out.println(arr);
	}
}


@HeapSort
$ perfect binary tree -- the tree where all the levels are completely filled
$ almost perfect binary tree -- its not perfect binary tree, leaves at the same lvel are been filled from left to right
$ complete binary tree -- nodes until the 2nd last level should be compltely filled and in the last level we should fill from left to right.

$ the heapsort algo is divided into phases of heapify, heapsort
$ incase of heap the left child is stored in 2i+1 and right child is stored in 2i+2 in the form of array.
$ to find the parent of the given child " i " is given by " ceil(i/2)-1 "
$ if the height of the binary tree is h then the no.of nodes at each level is [2^h]
$ height/total.no.of nodes that can contain in the binary tree is [2^(h+1) -1]

$ buildheap -- O(logn)   delmax -- O(logn)
  findmax -- O(1)	 findmin -- O(N)
  search -- O(n)	 

#CODE
	static void heapify(int arr[], int index, int size){
        int largest=index;
        int left=(2*index)+1;
        int right=(2*index)+2;
        if(left<size && arr[left]>arr[largest]){
            largest=left;
        }if(right<size && arr[right]>arr[largest]){
            largest=right;
        }
        if(largest!=index){
            int temp=arr[index];
            arr[index]=arr[largest];
            arr[largest]=temp;
            heapify(arr,index,size);
        }
    }
    static void heapSort(int arr[]){
        int size=arr.length;
        //building heap initially
        for(int i=(arr.length/2)-1;i>=0;i--){
            System.out.println(i);
            heapify(arr,i,size);
        }
        for(int i=arr.length-1;i>=0;i--){
            //swapping with the last ele
            int temp=arr[0];
            arr[0]=arr[i];
            arr[i]=temp;
            heapify(arr,0,i);
        }
    }
	public static void main(String[] args) {
	    int[]arr={9,6,2,5,12,52};
	    heapSort(arr);
	    
	    for(int i=0;i<arr.length;i++){
	        System.out.print(arr[i]+" ");
	    }
	}


#QUICK SORT
$ its 
