#In spring security we have the oAuth client2 authorization by using the github and google logins

#Setup in Application.properties
  
#github login

spring.security.oauth2.client.registration.github.client-id=84cc16b3fa6b151b0183
spring.security.oauth2.client.registration.github.client-secret=177fd38635172ebdc346f6ea147efba65490ea3e

#google login
spring.security.oauth2.client.registration.google.client-id=386695636831-v0nma8ivgr4mcls5jva3qsl7gt4ug1bb.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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


logging.level.org.springframework.security=TRACE


#After this we need to setup the login in github and google cloud engine 
  #in case of google cloud logins we have only access to 100 users initially.

  #we should have an call back URL once the setup is done for the setting up the github authorisation with the " client-id and client-secret ".
    homepage URL :  http://localhost:8080
    callback URL :  http://localhost:8080/login/oauth2/code/github
    callback URL :  http://localhost:8080/login/oauth2/code/google ---- for google login with oAuth  



Instead of creating the @Autowired annotation we can just make use of the constructor for it.

@Autowired --- 
Imagerepo imagerepo #this can be changed to the following constructor 
public ImageService(ImageRepo imageRepo){
  this.imageRepo=imageRepo;
}


In spring security the OAuth can be done in the folowing way with class and config that are mentioned above
public class SecurityConfig {
    @Bean
    SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        return http.
                authorizeHttpRequests(auth -> {
                    auth.requestMatchers("/").permitAll();
                    auth.anyRequest().authenticated();
                } )
                .oauth2Login(withDefaults())
                .formLogin(withDefaults())
                .build();
    }
}


@RestController returns a json/xml data in return whereas the @Controller annotation retunrs an view that is mentioned in the controller page.


#Connectors are in charge of accepting and processing requests that the clients sent to Tomcat. In order to have a connection with the client, different protocols are used by the connectors. These connectors can be HTTP or HTTPS. They handle tasks like connection management, request parsing, and data transmission.

#Once a request is received, connectors pass it to the appropriate container based on the requested URL. Containers manage the lifecycle of web applications and execute Java servlets or JSP code to generate responses. They provide an environment for running web applications, managing resources, and handling concurrent requests.

#The Catalina Servlet container, in particular, is responsible for mapping requests to the appropriate servlet and managing the servlet's life cycle. It handles the process of generating dynamic content by executing servlet code and producing the response that is sent back to the client.
