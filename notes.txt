Note:  
1.acs -- accessed
2.auto -- automatically
Default:
    firstly the default access modifier is called the package level modifier where the class declared as default,
    can be accessed only if they are available in the same package it cannot be accessed from another package.

    An class cannot be declared as private || protected in Top-level class it can be private in subclasses or nested classes
    it can only be public,abstract,final.

    protected method with default class can be accesed

    private methods cannot be accesed even if they are in same package
        #Setting access to an private method, should be done by :
        #in  main method add throws Exception
        Class c=Hello.class;//className.class
        Object obj=c.newInstance();
        Method m=c.getDeclaredMethod("def",null);//(method name,params type declaration)
        m.setAccessible(true);
        m.invoke(obj, null);//(obj,args)

    protected methods can be "acs" within the same class and diff class in the same package.
    
    we can find whether to impl inheritance by jus seeing the word "is a" for Ex:
        #Car is vehicle
        #lizard is a reptile
        #An parent child relationship, child class extends parent where in case of vehicle it can 
        be 2 wheeler 3 wheeler and others where an similarity is they are vehicles and they have An
        diff behav of riding them.

    If the abstract class has an param constr then its extended class should also have an param constructor
    of the super class that should be mentioned in the constru body of extended class
    public abstract class Main{
        protected String name;
        @Data
        @ArgsConstructor
        
    }
    class Test extends Main{
        public Test(String name){
            super(name);
        }
    }
    The main reason for abstract class is that encapsulating common fun,
    polymorphic behvior where an abstract class is able to hold the instance/object of
    the subclass and can run anytime.

    An exmaple of Param abstract methods
    public abstract class Test {
        protected String name;
        public Test(String name){ this.name=name;}
        abstract void dis();
    }
    class Test2 extends Test{
        String role;
        public Test2(String role,String name){
            super(name);
            this.role=role;
        }
        void dis(){
            System.out.println("hello "+name+role);
        }    
    }

    #if the method is non-abstract inside an abstract class then its an concrete Class
    where it should be impl there itslef it cannot be simply impl with semicolon;
    #if the class is declared as abs and the methods are not abs then its called the "adapter classes"
    #abs var are not possible

    Member modifier
    #public --  Global level access
    #private -- acs within the class
    #default -- acs within the package

    Inheritance in java where if we have mentioned params in parent constr and if we are ini child class with
    constr then if we are in need of parent class constr we can call them by super()
    method and it should be like,
    class B extends A{
        public B(super_params,length){
            int length;
            super(params);
            this.length=length;
        }
    }


    Classes are the blueprint where for example if we want an building to be built then 
    we have the blueprint with bedroom, dining, portigo and etc...where its an prop of
    the building that we have.

    Whereas objects are the real world entity where they are built upon classes with the 
    mentioned attributes like the dimensions of the building are mentioned through 
    objects where they create memory like,
           Bedroom b=new Bedroom();
           b.length=20;
           b.width=40;
    hence the length and width of the bedroom is set, the memory is created internally.
    On the whole, object is the entity that exists in memory and can be manipulated.


    #In inheritance we java doesnt support the multiple inheritance concept since, in case of
     multiple inh if we have the methods that are common to the classes that are related to each 
     other, 
     the method overrides the parent class method when we are extending them, it cant extend coz 
     when we create an object for the subclass and once the method is been called it cannot 
     decide from which class should I call the given method, there occurs an problem , but actually 
     the method is overriden then y shouldn't the overriden method been displayed ??

     Incase of interface the methods are just initialized but not been given body , an class can extend
     more than 1 interface and they can define the bodies for them by defining the objects and calling them.
        interface Phone{
            void Display();
            void Ram();
        }
        interface Laptop{
            // final String name;
            void Screen();
            void Ram(String name);
        }
        public class Keys implements Phone,Laptop {
            public void Display(){
                System.out.println("hello dplay");
            }
            public void Ram(String name){
                System.out.println("hello RAM"+name);
            }
            public void Ram(){
                System.out.println("helooram ");
            }
            public void Screen(){
                System.out.println("hello scren");
            }
            public void Hdd(){
                System.out.println("hell hdd");
            }
        }

    An example of the multiple inh concept that cannot be impl

    class ParentClass {
        void parentMethod() {
            System.out.println("Parent method");
        }
    }

    class AnotherParentClass {
        void anotherParentMethod() {
            System.out.println("Another parent method");
        }
    }

    class ChildClass extends ParentClass {
        void childMethod() {
            System.out.println("Child method");
        }
    }

    class GrandChildClass extends ChildClass, AnotherParentClass { // This is not allowed in Java
        void grandChildMethod() {
            System.out.println("Grandchild method");
        }
    }

    public class Main {
        public static void main(String[] args) {
            GrandChildClass grandChildObj = new GrandChildClass();
            grandChildObj.childMethod();           // Inherited from ChildClass
            grandChildObj.parentMethod();          // Inherited from ParentClass
            grandChildObj.anotherParentMethod();   // Inherited from AnotherParentClass
            grandChildObj.grandChildMethod();      // Own method
        }
    }
 

    #To overcome this we can use the "Composition/Delegation method" to solve this.
    #where a class contains objects of other classes to utilize their functionalities
    class ParentClass {
        void parentMethod() {
            System.out.println("Parent method");
        }
    }

    class AnotherParentClass {
        void anotherParentMethod() {
            System.out.println("Another parent method");
        }
    }

    class ChildClass {
        private ParentClass parentObj;
        private AnotherParentClass anotherParentObj;

        ChildClass() {
            parentObj = new ParentClass();
            anotherParentObj = new AnotherParentClass();
        }

        void childMethod() {
            System.out.println("Child method");
        }

        void parentMethod() {
            parentObj.parentMethod();
        }

        void anotherParentMethod() {
            anotherParentObj.anotherParentMethod();
        }
    }

    class GrandChildClass {
        private ChildClass childObj;

        GrandChildClass() {
            childObj = new ChildClass();
        }

        void grandChildMethod() {
            System.out.println("Grandchild method");
        }

        void childMethod() {
            childObj.childMethod();
        }

        void parentMethod() {
            childObj.parentMethod();
        }

        void anotherParentMethod() {
            childObj.anotherParentMethod();
        }
    }

    public class Main {
        public static void main(String[] args) {
            GrandChildClass grandChildObj = new GrandChildClass();
            grandChildObj.childMethod();           // Inherited through composition
            grandChildObj.parentMethod();          // Inherited through composition
            grandChildObj.anotherParentMethod();   // Inherited through composition
            grandChildObj.grandChildMethod();      // Own method
        }
    }


   # Y interface when we have abstract class and methods is that, in case of abstract classes
    we can only achieve partial abstr whereas incase of interface we can achive 100% abstr.
    
   # By having all methods in an interface declared without implementation details, 
    you ensure that the interface provides 100% abstraction. The interface solely 
    serves as a contract that defines what methods a class implementing it 
    should have, without specifying how those methods should be implemented.

   # abstract classes can also provide abstraction, but they can also have
    non-abstract (concrete) methods with implementation details.

   # Restricting the outside world to access the prop of classes is done through "encap",
   using "Private" keyword

   # Incase of abstr classes we cannot explicitly definethe objects , but the java can can itslef 
   instantiate through inheritance.
    ex:
        abstract class Keys{
            int x,y;
            public Keys(){
                SOP("Hello abstr constructor");
            }
            abstract void display();
        }
        class B extends Keys{
            void display(){
                SOP("Hello exntended class");
            }
        }

        main class:
            Keys k=new B();
            k.display();


        # Here once the extension is done,it auto calls the parent class and initializes 
        it, this should be done where it is able to look for the method that is being called and 
        the base class constructor is called by then. 



        # For every class the compiler maintains an method table,
        class Test{
            void m1(int i) SOP("s");
            void m2(String) SOP("k");                   Compiler -- m1(int), m2(String) [methods table]
        }

        **Mthod Overloading -- (Mthod signatures) where the method names are same but the args are diff from each other.
        class Keys{
            public void m1(int i){
                System.out.println("Integer type");
            }
            public void m1(double j){
                System.out.println("Float type");
            }
        }
        **Mthod Resoultion -- which method should exe first is been decided 
        #method Overloading is called compile time poly coz method res is taken care by ref type not on run time object;
        Keys k = new Keys();
        ** k -- ref type -- this will refer to the class that is defined left of it. 

        **Mthod Overriding is the concept where an method is been overrided with same function         but in diff classes with diff funcnalities and they are exe based upon the object type         not on the reference type.
        class A{
            void show(){
                System.out.print("in a");
            }
        }
        class B extends A{
             void show(){
                System.out.print("in b");
            }
        }
        class C extends B{
             void show(){
                System.out.print("in c");
            }
        }
        public class Main
        {
        	public static void main(String[] args) {
        	    A obj=new C();
        	    obj.show();
        	}
        }


@Final method

$ final variable is used to create a constant variable once assigned cannot be changed.
   $ once we make a class final it cannot be inherited.
   $ final can be used with variables, clases and methods.
$ finally is a block that is used with try block, when we connect with the databsse we use lot     of resources that are consumed where it needs to be closed at last , we do that using the     finally block, it executes even if triggerd the exception block  or not , we get exe that.
$ finalize method is a part of object class, once before the garbage collector collects the      objects that are needed to be destroyed, before that if we want to do some operation then that can be performed using the finalize keyword.

#CODE
class A{
    public A(){
        sysout("object created");
    }
    @Override
    public void finalize(){
        sout("finalize is called atlast");
        //we cannot call the finalize method since its depreacted and also this funcnality             cannot be exe since its handled by the garbage collector.
        //if we want to handle the garbgae collector then we shoukld use the 
        #System.gc(); //calling the garbage collector will call the finalize method.gc is a             static method
    }
}
public static void main(String[] args){
    A obj=new A(); // here obj is a refrence for that class A.the garbage colector will            // collect the object ,once u see a obvject without a refrence.
    obj=null; // here after this it will destroy the object since the refrence is null or does     not have anything to point.
    
}

@Static 
$ static is a class member not an object member, since we use the class name for calling them.
$ java instance var are the var that are declared inside anc class but outside the scope of function is called instance var
$ the static keywords are used to reduce the work of the constructors that are used to create objects. the main method is itslef an static method since if we want to call the main method then if its not static then we create objects for them to call;
$ static block is executed only once even if its called n no.of times, if we want to initialize the default value for the variables that are declared then ,  use of contructor comes into picture
    class A{
       String name;
       boolean save;
       static String ui;
       
       A(){             // exe when u create a object // class is loaded first and then the                             constructor
           name="hemraj";
           save=true;
            
       }
      static{      // exe when loading a class -- this is loaded only once.
          ui="flex";
      }
       
       void show(){
           System.out.println(name +" "+save+" "+ui);
       }
    }
    public class Main
    {
    	public static void main(String[] args) {
    	    A obj=new A();
    	    
    	    obj.show();
    	    obj.show();
    	    obj.show();
    	}
    }


$ We cannot access a non-static variable inside a static block.
$ static variable is shared by diff objects.
$ the static block is exe first and then the constructors are called. if the objects are not created then the class itself is not loaded.

$ if we want to load the class and don't want to create the object then,
    Class.forName("class name should be defined")

$ if the class is loaded then the static block is exe.

$ A non-static variable cannot be used inside a static method and cannot be accessed.

$ A non-static variable can be accesed indirectly in a static method with the help of object refrence.
#CODE
    class A{
       String name;
       boolean save;
       static String ui;
      static{
          ui="flex";
      }
       
       void show(){
           System.out.println(name +" "+save+" "+ui);
       }
       static void show1(A obj){
           System.out.print(obj.name+" "+obj.save+" "+obj.ui);
          System.out.print("static method");
       }
    }
    public class Main
    {
    	public static void main(String[] args) {
    	    A obj1=new A();
    	    obj1.name="helo";
    	    obj1.save=false;
    	   // obj1.show();
    	    A.show1(obj1);
    	}
    }


@Constructor chaining
public class Test{
    int id,age;
    String name, add;
    public Test(int id,int age){
        this.id=id;
        this.age=age;
    }
    public Test(int id,int age,String name,String add){
        this(id,age);
        this.name=name;this.add=add;
    }
    public static void main(String[] args) {
        Test m=new Test(1,22,"buju","nr");
        System.out.println(m.name+" "+m.age+" "+m.id+" "+m.add);
    }
}

$ constructor chaining is the concept of calling an constrcutor of same class into  another constructor
$ instead of passing the this keyword we could have used the curet class object instead we use this keyword because its an final variable and they      cannot be changed or assigned to another.

